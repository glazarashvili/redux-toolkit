{"ast":null,"code":"import { createSlice, configureStore } from \"@reduxjs/toolkit\";\nconst initialCounterState = {\n  counter: 0,\n  showCounter: false\n};\nconst initialAuthState = {\n  isAuthenticated: false\n};\nconst counterSlice = createSlice({\n  name: \"counter\",\n  initialState: initialCounterState,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n\n    decrement(state) {\n      state.counter--;\n    },\n\n    increase(state, action) {\n      state.counter = state.counter + action.payload;\n    },\n\n    toggle(state) {\n      state.showCounter = !state.showCounter;\n    }\n\n  }\n});\nconst authSlice = createSlice({\n  name: \"auth\",\n  initialState: initialAuthState,\n  reducers: {\n    login(state) {\n      state.isAuthenticated = true;\n    },\n\n    logout(state) {\n      state.isAuthenticated = false;\n    }\n\n  }\n});\nconst store = configureStore({\n  reducer: {\n    counter: counterSlice.reducer,\n    auth: AuthSlice.reducer\n  }\n});\nexport const counterActions = counterSlice.actions;\nexport const authActions = authSlice.actions;\nexport default store; // const counterReducer = (state = initialState, action) => {\n//   if (action.type === \"increment\") {\n//     return {\n//       counter: state.counter + 1,\n//       showCounter: state.showCounter,\n//     };\n//   }\n//   if (action.type === \"decrement\") {\n//     return {\n//       counter: state.counter - 1,\n//       showCounter: state.showCounter,\n//     };\n//   }\n//   if (action.type === \"increase\") {\n//     return {\n//       counter: state.counter + action.amount,\n//       showCounter: state.showCounter,\n//     };\n//   }\n//   if (action.type === \"toggle\") {\n//     return {\n//       counter: state.counter,\n//       showCounter: !state.showCounter,\n//     };\n//   }\n//   return state;\n// };\n// const store = createStore(counterReducer);","map":{"version":3,"sources":["/home/george/Desktop/01-starting-project/src/store/index.js"],"names":["createSlice","configureStore","initialCounterState","counter","showCounter","initialAuthState","isAuthenticated","counterSlice","name","initialState","reducers","increment","state","decrement","increase","action","payload","toggle","authSlice","login","logout","store","reducer","auth","AuthSlice","counterActions","actions","authActions"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,cAAtB,QAA4C,kBAA5C;AAEA,MAAMC,mBAAmB,GAAG;AAAEC,EAAAA,OAAO,EAAE,CAAX;AAAcC,EAAAA,WAAW,EAAE;AAA3B,CAA5B;AACA,MAAMC,gBAAgB,GAAG;AAAEC,EAAAA,eAAe,EAAE;AAAnB,CAAzB;AAEA,MAAMC,YAAY,GAAGP,WAAW,CAAC;AAC/BQ,EAAAA,IAAI,EAAE,SADyB;AAE/BC,EAAAA,YAAY,EAAEP,mBAFiB;AAG/BQ,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SAAS,CAACC,KAAD,EAAQ;AACfA,MAAAA,KAAK,CAACT,OAAN;AACD,KAHO;;AAIRU,IAAAA,SAAS,CAACD,KAAD,EAAQ;AACfA,MAAAA,KAAK,CAACT,OAAN;AACD,KANO;;AAORW,IAAAA,QAAQ,CAACF,KAAD,EAAQG,MAAR,EAAgB;AACtBH,MAAAA,KAAK,CAACT,OAAN,GAAgBS,KAAK,CAACT,OAAN,GAAgBY,MAAM,CAACC,OAAvC;AACD,KATO;;AAURC,IAAAA,MAAM,CAACL,KAAD,EAAQ;AACZA,MAAAA,KAAK,CAACR,WAAN,GAAoB,CAACQ,KAAK,CAACR,WAA3B;AACD;;AAZO;AAHqB,CAAD,CAAhC;AAmBA,MAAMc,SAAS,GAAGlB,WAAW,CAAC;AAC5BQ,EAAAA,IAAI,EAAE,MADsB;AAE5BC,EAAAA,YAAY,EAAEJ,gBAFc;AAG5BK,EAAAA,QAAQ,EAAE;AACRS,IAAAA,KAAK,CAACP,KAAD,EAAQ;AACXA,MAAAA,KAAK,CAACN,eAAN,GAAwB,IAAxB;AACD,KAHO;;AAIRc,IAAAA,MAAM,CAACR,KAAD,EAAQ;AACZA,MAAAA,KAAK,CAACN,eAAN,GAAwB,KAAxB;AACD;;AANO;AAHkB,CAAD,CAA7B;AAaA,MAAMe,KAAK,GAAGpB,cAAc,CAAC;AAC3BqB,EAAAA,OAAO,EAAE;AACPnB,IAAAA,OAAO,EAAEI,YAAY,CAACe,OADf;AAEPC,IAAAA,IAAI,EAAEC,SAAS,CAACF;AAFT;AADkB,CAAD,CAA5B;AAOA,OAAO,MAAMG,cAAc,GAAGlB,YAAY,CAACmB,OAApC;AACP,OAAO,MAAMC,WAAW,GAAGT,SAAS,CAACQ,OAA9B;AAEP,eAAeL,KAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA","sourcesContent":["import { createSlice, configureStore } from \"@reduxjs/toolkit\";\n\nconst initialCounterState = { counter: 0, showCounter: false };\nconst initialAuthState = { isAuthenticated: false };\n\nconst counterSlice = createSlice({\n  name: \"counter\",\n  initialState: initialCounterState,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n    decrement(state) {\n      state.counter--;\n    },\n    increase(state, action) {\n      state.counter = state.counter + action.payload;\n    },\n    toggle(state) {\n      state.showCounter = !state.showCounter;\n    },\n  },\n});\n\nconst authSlice = createSlice({\n  name: \"auth\",\n  initialState: initialAuthState,\n  reducers: {\n    login(state) {\n      state.isAuthenticated = true;\n    },\n    logout(state) {\n      state.isAuthenticated = false;\n    },\n  },\n});\n\nconst store = configureStore({\n  reducer: {\n    counter: counterSlice.reducer,\n    auth: AuthSlice.reducer,\n  },\n});\n\nexport const counterActions = counterSlice.actions;\nexport const authActions = authSlice.actions;\n\nexport default store;\n\n// const counterReducer = (state = initialState, action) => {\n//   if (action.type === \"increment\") {\n//     return {\n//       counter: state.counter + 1,\n//       showCounter: state.showCounter,\n//     };\n//   }\n\n//   if (action.type === \"decrement\") {\n//     return {\n//       counter: state.counter - 1,\n//       showCounter: state.showCounter,\n//     };\n//   }\n\n//   if (action.type === \"increase\") {\n//     return {\n//       counter: state.counter + action.amount,\n//       showCounter: state.showCounter,\n//     };\n//   }\n\n//   if (action.type === \"toggle\") {\n//     return {\n//       counter: state.counter,\n//       showCounter: !state.showCounter,\n//     };\n//   }\n\n//   return state;\n// };\n\n// const store = createStore(counterReducer);\n"]},"metadata":{},"sourceType":"module"}